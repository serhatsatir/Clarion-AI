

   MEMBER('AI.clw')                                        ! This is a MEMBER module


   INCLUDE('ABTOOLBA.INC'),ONCE
   INCLUDE('ABWINDOW.INC'),ONCE
   INCLUDE('NetWww.inc'),ONCE

                     MAP
                       INCLUDE('AI003.INC'),ONCE        !Local module procedure declarations
                     END


!!! <summary>
!!! Generated from procedure template - Window
!!! You can talk to the Ollama models you have set up using this screen.
!!! </summary>
Ollama PROCEDURE 

API_temp             REAL(0.7)                             ! 
OllamaServer         CSTRING(101)                          ! 
str                  CLASS(StringTheory)                   ! 
                     END                                   ! 
MyQuestion           CSTRING(5001)                         ! 
ChatGPTResponse      CSTRING(300001)                       ! 
Loc:Status           CSTRING(501)                          ! 
JSON                 JSONDataClass                         ! 
Loc:Line             STRING(1000)                          ! 
Model                CSTRING(51)                           ! 
Loc:Generate         GROUP,PRE()                           ! 
response             CSTRING(101),NAME('response')         ! 
done                 BYTE,NAME('done')                     ! 
                     END                                   ! 
Loc:Pack             GROUP,PRE()                           ! 
role                 CSTRING(51),NAME('role')              ! 
content              CSTRING(101),NAME('content')          ! 
                     END                                   ! 
Loc:PostString       STRING(10000)                         ! 
Loc:GetString        STRING(500000)                        ! 
Loc:AIQ              QUEUE,PRE(AIQ)                        ! 
line                 LONG                                  ! 
role                 CSTRING(51)                           ! 
content              CSTRING(101)                          ! 
                     END                                   ! 
Window               WINDOW('Ollama AI Example'),AT(,,386,224),FONT('Segoe UI',10,,FONT:regular),DOUBLE,CENTER, |
  ICON('ollama.ico'),GRAY,IMM,SYSTEM
                       BOX,AT(3,4,380,216),USE(?Box1),COLOR(COLOR:Gray),LINEWIDTH(1),ROUND
                       STRING(@s255),AT(8,205,345),USE(Loc:Status),CENTER,TRN
                       TEXT,AT(9,9,369,37),USE(MyQuestion),VSCROLL
                       TEXT,AT(9,90,369,112),USE(ChatGPTResponse),VSCROLL,COLOR(00DCDCDCh),READONLY
                       BUTTON('Post'),AT(328,49,50,12),USE(?GetPage),LEFT,ICON('ollama.ico'),TIP('Send your re' & |
  'quest to ChatGPT')
                       BUTTON,AT(363,205,15,10),USE(?BUTTON:Copy),ICON(ICON:Copy),FLAT,TIP('Copy response to clipboard'), |
  TRN
                       PROMPT('Temperature:'),AT(27,77),USE(?API_temp:Prompt),TRN
                       SPIN(@n3.1),AT(77,77,,10),USE(API_temp),RIGHT(1),RANGE(0,1),STEP(0.1),TIP('* Low temper' & |
  'ature (0 to 0.3): More focused, coherent, and conservative outputs.<0DH,0AH>* Medium' & |
  ' temperature (0.3 to 0.7): Balanced creativity and coherence.<0DH,0AH>* High tempera' & |
  'ture (0.7 to 1): Highly creative and diverse, but potentially less coherent.')
                       STRING('API'),AT(7,49,,38),USE(?STRING1),FONT(,,,FONT:bold,CHARSET:DEFAULT),CENTER,ANGLE(900), |
  COLOR(00D3D3D3h)
                       PROMPT('Model:'),AT(27,63),USE(?Model:Prompt)
                       ENTRY(@s50),AT(77,63,153,10),USE(Model),TIP('Ollama AI model name (from https://ollama.' & |
  'com/library) like; llama2, llama3, phi3, mistral, gemma, ...')
                       PROMPT('Ollama Server:'),AT(26,50),USE(?Loc:OllamaServer:Prompt)
                       ENTRY(@s100),AT(77,49,233,10),USE(OllamaServer),TIP('Ollama Server address like; http:/' & |
  '/127.0.0.1:11434')
                       PROMPT('https://ollama.com/'),AT(311,77),USE(?PROMPT:OllamaHomePage),TRN
                     END

ThisWindow           CLASS(WindowManager)
Init                   PROCEDURE(),BYTE,PROC,DERIVED
Kill                   PROCEDURE(),BYTE,PROC,DERIVED
TakeAccepted           PROCEDURE(),BYTE,PROC,DERIVED
TakeEvent              PROCEDURE(),BYTE,PROC,DERIVED
                     END

Toolbar              ToolbarClass
! ----- st --------------------------------------------------------------------------
st                   Class(StringTheory)
                     End  ! st
! ----- end st -----------------------------------------------------------------------
!Local Data Classes
ThisWebClient        CLASS(NetWebClient)                   ! Generated by NetTalk Extension (Class Definition)
ErrorTrap              PROCEDURE(string errorStr,string functionName),DERIVED
PageReceived           PROCEDURE(),DERIVED
Process                PROCEDURE(),DERIVED

                     END


  CODE
  GlobalResponse = ThisWindow.Run()                        ! Opens the window and starts an Accept Loop

!---------------------------------------------------------------------------
DefineListboxStyle ROUTINE
!|
!| This routine create all the styles to be shared in this window
!| It`s called after the window open
!|
!---------------------------------------------------------------------------
GetAnswer   ROUTINE
    ThisWebClient.TextOnly()
    st.Trace('Line='&RIGHT(ThisWebClient.ThisPage.GetValue(),500))
    st.Free(TRUE)
    st.SetValue(ThisWebClient.ThisPage.GetValue()); st.Split('<10>')
    LOOP i#=1 TO st.Records()
        !IF st.Records()<20 THEN st.Trace('Satýr-'&i#&' *'&st.GetLine(i#)).

        !Generate API response
        Loc:Line=st.GetLine(i#)
        Loc:Line=str.Utf8ToAnsi(Loc:Line,len#,st:CP_ISO_8859_9)
        JSON.FromJSON(Loc:Line,Loc:Generate)
        IF response<>'' THEN
            role='Generate'
            content=response
            DO AddResponse
        ELSE
            !Chat API response
            str.SetValue(CLIP(Loc:Line))
            Loc:Line=str.Between('{{','}',5,,TRUE,FALSE)
            JSON.FromJSON(Loc:Line,Loc:Pack)
            IF Loc:Pack.content<>'' THEN 
                DO AddResponse
            END
            IF done=1 THEN 
                Loc:Status='Your question has been answered.'
                ThisWebClient.Close()
                SETCURSOR(); DISPLAY()
            END
        END
    END
    DO WriteAnswer
    !st.Trace('Satýr Sayýsý:'&st.Records()&' Okunan:'&RECORDS(Loc:AIQ)&' Gelen:'&ThisWebClient.ThisPage.GetValue())
AddResponse         ROUTINE
    AIQ:line=i#
    GET(Loc:AIQ,AIQ:line)
    IF ERRORCODE() THEN
        !IF AIQ:line<100 THEN st.Trace('Incoming ('&LEN(Loc:Pack.content)&') '&Loc:Pack.content).
        str.SetValue(Loc:Pack.content); st.Replace('\n','<10,13>'); str.JsonDecode(); Loc:Line=str.GetValue()

        len#=LEN(Loc:Pack.content)
        IF SUB(Loc:Pack.content, LEN(CLIP(Loc:Pack.content)), 1)=' ' THEN len#+=1.
        
        !IF AIQ:line<100 THEN st.Trace('Added: ('&len#&') '&Loc:Line).
        AIQ:role = Loc:Pack.role
        AIQ:content = SUB(Loc:Line,1,len#)
        ADD(Loc:AIQ,AIQ:line)
    END
WriteAnswer       ROUTINE
    ChatGPTResponse=''
    LOOP i#=1 TO RECORDS(Loc:AIQ)
        GET(Loc:AIQ,i#)
        IF AIQ:content<>'' THEN
            ChatGPTResponse=ChatGPTResponse&AIQ:content
        END
    END
    DISPLAY(?ChatGPTResponse)
ReformatQuestion       ROUTINE
    st.SetValue(CLIP(MyQuestion))
    st.JsonEncode()

    !!!Low temperature (0 to 0.3): More focused, coherent, and conservative outputs.
    !!!Medium temperature (0.3 to 0.7): Balanced creativity and coherence.
    !!!High temperature (0.7 to 1): Highly creative and diverse, but potentially less coherent.
    Loc:PostString='{{"model":"'&Model&'","prompt":"'&st.GetValue()&'","options": {{"seed":12,"temperature":'&API_temp&'}}'

    ! As in the example below, If you send ("stream":false) in the json packet, it sends the answer in one packet.
    !{{"model": "llama3","messages":[{{"role":"user","content": "What do you know about Mustafa Kemal Ataturk?"],"stream":false}
    
    ! Translate from Turkish characters
    Loc:PostString=st.AnsiToUtf8(Loc:PostString,uz#,st:CP_ISO_8859_9)

    FREE(Loc:AIQ)
    

ThisWindow.Init PROCEDURE

ReturnValue          BYTE,AUTO

  CODE
  GlobalErrors.SetProcedureName('Ollama')
  SELF.Request = GlobalRequest                             ! Store the incoming request
  ReturnValue = PARENT.Init()
  IF ReturnValue THEN RETURN ReturnValue.
  SELF.FirstField = ?Box1
  SELF.VCRRequest &= VCRRequest
  SELF.Errors &= GlobalErrors                              ! Set this windows ErrorManager to the global ErrorManager
  ! Restore preserved local variables from non-volatile store
  OllamaServer = INIMgr.TryFetch('Ollama_PreservedVars','OllamaServer')
  Model = INIMgr.TryFetch('Ollama_PreservedVars','Model')
  API_temp = INIMgr.TryFetch('Ollama_PreservedVars','API_temp')
  MyQuestion = INIMgr.TryFetch('Ollama_PreservedVars','MyQuestion')
  IF MyQuestion='' THEN MyQuestion='Could you write a lyrical poem about Clarion programming language?'.
  IF OllamaServer='' THEN OllamaServer='http://127.0.0.1:11434'.
  IF Model='' THEN Model='llama3'.
  CLEAR(GlobalRequest)                                     ! Clear GlobalRequest after storing locally
  CLEAR(GlobalResponse)
  SELF.AddItem(Toolbar)
  SELF.Open(Window)                                        ! Open window
  !Setting the LineHeight for every control of type LIST/DROP or COMBO in the window using the global setting.
                                               ! Generated by NetTalk Extension (Start)
  ThisWebClient.init()
  if ThisWebClient.error <> 0
    ! Put code in here to handle if the object does not initialise properly
  end
  Do DefineListboxStyle
  !ProcedureTemplate = Window
  INIMgr.Fetch('Ollama',Window)                            ! Restore window settings from non-volatile store
  SELF.SetAlerts()
  RETURN ReturnValue


ThisWindow.Kill PROCEDURE

ReturnValue          BYTE,AUTO

  CODE
  ThisWebClient.Kill()                              ! Generated by NetTalk Extension
  ReturnValue = PARENT.Kill()
  IF ReturnValue THEN RETURN ReturnValue.
  IF SELF.Opened
    INIMgr.Update('Ollama',Window)                         ! Save window data to non-volatile store
  END
  ! Save preserved local variables in non-volatile store
  INIMgr.Update('Ollama_PreservedVars','OllamaServer',OllamaServer)
  INIMgr.Update('Ollama_PreservedVars','Model',Model)
  INIMgr.Update('Ollama_PreservedVars','API_temp',API_temp)
  INIMgr.Update('Ollama_PreservedVars','MyQuestion',MyQuestion)
  GlobalErrors.SetProcedureName
  RETURN ReturnValue


ThisWindow.TakeAccepted PROCEDURE

ReturnValue          BYTE,AUTO

Looped BYTE
  CODE
  LOOP                                                     ! This method receive all EVENT:Accepted's
    IF Looped
      RETURN Level:Notify
    ELSE
      Looped = 1
    END
  ReturnValue = PARENT.TakeAccepted()
    CASE ACCEPTED()
    OF ?GetPage
      ThisWindow.Update()
      IF Model='' THEN 
          MESSAGE('You need to select the model file you want to talk with...','Ollama AI',ICON:Exclamation)
          SELECT(?Model)
          CYCLE
      END
      
      SETCURSOR(CURSOR:Wait)
      Loc:GetString=''
      ChatGPTResponse=''
      Loc:Status = 'Waiting response'
      DISPLAY()
      
      ThisWebClient.SetAllHeadersDefault()
      ThisWebClient.CanUseProxy = True
      ThisWebClient.HeaderOnly = False
      ThisWebClient.HTTPVersion = 'HTTP/1.1'
      ! ChatGPT API key
      ThisWebClient.ContentType = 'application/json'
      ThisWebClient.AsyncOpenUse = True
      ThisWebClient.AsyncOpenTimeOut = 0
      ThisWebClient.InActiveTimeout = 9000
      
      ThisWebClient.SSLCertificateOptions.CertificateFile = ''
      ThisWebClient.SSLCertificateOptions.PrivateKeyFile = ''
      ThisWebClient.SSLCertificateOptions.DontVerifyRemoteCertificateCommonName = True
      ThisWebClient.SSLCertificateOptions.DontVerifyRemoteCertificateWithCARoot = True
      
      DO ReformatQuestion
      
      !!! /api/generate or /api/chat. Both are working.
      ThisWebClient.Post(OllamaServer&'/api/generate',Loc:PostString)
      !ThisWebClient.Post(OllamaServer&'/api/chat',Loc:PostString)
    END
    RETURN ReturnValue
  END
  ReturnValue = Level:Fatal
  RETURN ReturnValue


ThisWindow.TakeEvent PROCEDURE

ReturnValue          BYTE,AUTO

Looped BYTE
  CODE
  LOOP                                                     ! This method receives all events
    IF Looped
      RETURN Level:Notify
    ELSE
      Looped = 1
    END
    ThisWebClient.TakeEvent()                 ! Generated by NetTalk Extension
  ReturnValue = PARENT.TakeEvent()
    RETURN ReturnValue
  END
  ReturnValue = Level:Fatal
  RETURN ReturnValue


ThisWebClient.ErrorTrap PROCEDURE(string errorStr,string functionName)


  CODE
  PARENT.ErrorTrap(errorStr,functionName)
  Message ('No response received. Error ' & ThisWebClient.Error & |
           ' = ' & ThisWebClient.InterpretError())
  SETCURSOR  ! Return mouse back to normal.
             ! If an error occurs, the NetWebClient will display a message,
             ! unless you suppress error messages in the procedure extension template, 
             ! in which case you would need to handle your own error messages.
  


ThisWebClient.PageReceived PROCEDURE


  CODE
  ! This is the code that is called when the page has been downloaded.
  ! In this case we display it on the screen by putting it in the ChatGPTResponse
  ! variable.
  ThisWebClient.TextOnly()
  IF SELF.ThisPage.Length() <= 0
      Loc:GetString = ''
  ELSIF SELF.ThisPage.Length() < size (Loc:GetString)
      Loc:GetString = SELF.ThisPage.GetValue()
      Loc:Status='Your question has been answered.'
      DO GetAnswer
      ThisWebClient.Close()
  ELSE
      Loc:Status = '* Incoming reply ' & SELF.ThisPage.Length() & |
               ' bytes, the part you can see on the screen' & size (Loc:GetString) & ' bytes.'
      Loc:GetString=SELF.ThisPage.GetValue()
      DO GetAnswer
      ThisWebClient.Close()
  END
  SETCURSOR(); DISPLAY()
  PARENT.PageReceived


ThisWebClient.Process PROCEDURE


  CODE
  ! Must be above parent call for this to work. As the parent.process calls .PageReceived()
  IF SELF.packet.packetType = NET:SimplePartialDataPacket
      IF SELF.PageContentLen > 0
          Loc:Status = 'Waiting response ' & SELF.ThisPage.Length() & ' / ' & (SELF.PageContentLen + SELF.HeaderLen)
          DISPLAY(?Loc:Status)
      END
      DO GetAnswer
  END
  PARENT.Process

