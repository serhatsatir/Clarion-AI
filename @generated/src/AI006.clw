

   MEMBER('AI.clw')                                        ! This is a MEMBER module


   INCLUDE('ABTOOLBA.INC'),ONCE
   INCLUDE('ABWINDOW.INC'),ONCE
   INCLUDE('NetWww.inc'),ONCE

                     MAP
                       INCLUDE('AI006.INC'),ONCE        !Local module procedure declarations
                     END


!!! <summary>
!!! Generated from procedure template - Window
!!! </summary>
GetResponse PROCEDURE (BYTE Par:Method,STRING Par:APIKey,STRING Par:Address,<STRING Par:Request>)

Loc:Status           CSTRING(501)                          ! 
Loc:PostString       STRING(10000)                         ! 
Loc:GetString        STRING(500000)                        ! 
Window               WINDOW,AT(,,386,224),FONT('Segoe UI',10,,FONT:regular),DOUBLE,ICONIZE,CENTER,ICON('chatgpt.ico'), |
  GRAY,IMM,SYSTEM
                       BOX,AT(3,4,380,216),USE(?Box1),COLOR(COLOR:Gray),LINEWIDTH(1),ROUND
                       STRING(@s255),AT(8,205,371),USE(Loc:Status),CENTER,TRN
                       TEXT,AT(9,9,369,37),USE(Loc:PostString),VSCROLL
                       TEXT,AT(9,85,369,117),USE(Loc:GetString),VSCROLL,COLOR(00DCDCDCh),READONLY
                     END

ThisWindow           CLASS(WindowManager)
Init                   PROCEDURE(),BYTE,PROC,DERIVED
Kill                   PROCEDURE(),BYTE,PROC,DERIVED
TakeEvent              PROCEDURE(),BYTE,PROC,DERIVED
TakeWindowEvent        PROCEDURE(),BYTE,PROC,DERIVED
                     END

Toolbar              ToolbarClass
! ----- st --------------------------------------------------------------------------
st                   Class(StringTheory)
                     End  ! st
! ----- end st -----------------------------------------------------------------------
!Local Data Classes
ThisWebClient        CLASS(NetWebClient)                   ! Generated by NetTalk Extension (Class Definition)
ErrorTrap              PROCEDURE(string errorStr,string functionName),DERIVED
PageReceived           PROCEDURE(),DERIVED
Process                PROCEDURE(),DERIVED

                     END


  CODE
  GlobalResponse = ThisWindow.Run()                        ! Opens the window and starts an Accept Loop
  RETURN(Loc:GetString)

!---------------------------------------------------------------------------
DefineListboxStyle ROUTINE
!|
!| This routine create all the styles to be shared in this window
!| It`s called after the window open
!|
!---------------------------------------------------------------------------
ResponseCompleted   ROUTINE
    ThisWebClient.Close()
    SETCURSOR()
    DISPLAY()
    POST(EVENT:CloseWindow)

ThisWindow.Init PROCEDURE

ReturnValue          BYTE,AUTO

  CODE
  GlobalErrors.SetProcedureName('GetResponse')
  SELF.Request = GlobalRequest                             ! Store the incoming request
  ReturnValue = PARENT.Init()
  IF ReturnValue THEN RETURN ReturnValue.
  SELF.FirstField = ?Box1
  SELF.VCRRequest &= VCRRequest
  SELF.Errors &= GlobalErrors                              ! Set this windows ErrorManager to the global ErrorManager
  ! Restore preserved local variables from non-volatile store
  CLEAR(GlobalRequest)                                     ! Clear GlobalRequest after storing locally
  CLEAR(GlobalResponse)
  SELF.AddItem(Toolbar)
  SELF.Open(Window)                                        ! Open window
  !Setting the LineHeight for every control of type LIST/DROP or COMBO in the window using the global setting.
                                               ! Generated by NetTalk Extension (Start)
  ThisWebClient.init()
  if ThisWebClient.error <> 0
    ! Put code in here to handle if the object does not initialise properly
  end
  Do DefineListboxStyle
  !ProcedureTemplate = Window
  INIMgr.Fetch('GetResponse',Window)                       ! Restore window settings from non-volatile store
  SELF.SetAlerts()
  RETURN ReturnValue


ThisWindow.Kill PROCEDURE

ReturnValue          BYTE,AUTO

  CODE
  ThisWebClient.Kill()                              ! Generated by NetTalk Extension
  ReturnValue = PARENT.Kill()
  IF ReturnValue THEN RETURN ReturnValue.
  IF SELF.Opened
    INIMgr.Update('GetResponse',Window)                    ! Save window data to non-volatile store
  END
  ! Save preserved local variables in non-volatile store
  GlobalErrors.SetProcedureName
  RETURN ReturnValue


ThisWindow.TakeEvent PROCEDURE

ReturnValue          BYTE,AUTO

Looped BYTE
  CODE
  LOOP                                                     ! This method receives all events
    IF Looped
      RETURN Level:Notify
    ELSE
      Looped = 1
    END
    ThisWebClient.TakeEvent()                 ! Generated by NetTalk Extension
  ReturnValue = PARENT.TakeEvent()
    RETURN ReturnValue
  END
  ReturnValue = Level:Fatal
  RETURN ReturnValue


ThisWindow.TakeWindowEvent PROCEDURE

ReturnValue          BYTE,AUTO

Looped BYTE
  CODE
  LOOP                                                     ! This method receives all window specific events
    IF Looped
      RETURN Level:Notify
    ELSE
      Looped = 1
    END
  ReturnValue = PARENT.TakeWindowEvent()
    CASE EVENT()
    OF EVENT:OpenWindow
      0{PROP:Hide}=TRUE
      
      SETCURSOR(CURSOR:Wait)
      Loc:GetString=''
      Loc:Status = 'Waiting response'
      DISPLAY()
      
      ThisWebClient.SetAllHeadersDefault()
      ThisWebClient.CanUseProxy = True
      ThisWebClient.HeaderOnly = False
      ThisWebClient.HTTPVersion = 'HTTP/1.1'
      ! ChatGPT API key
      ThisWebClient.ContentType = 'application/json'
      ThisWebClient.CustomHeader = 'Authorization: Bearer '&Par:APIKey&'<13,10>OpenAI-Beta: assistants=v2'
      ThisWebClient.AsyncOpenUse = True
      ThisWebClient.AsyncOpenTimeOut = 2000
      ThisWebClient.InActiveTimeout = 9000
      
      ThisWebClient.SSLCertificateOptions.CertificateFile = ''
      ThisWebClient.SSLCertificateOptions.PrivateKeyFile = ''
      ThisWebClient.SSLCertificateOptions.DontVerifyRemoteCertificateCommonName = True
      ThisWebClient.SSLCertificateOptions.DontVerifyRemoteCertificateWithCARoot = True
      
      CASE Par:Method
      OF 1
          ThisWebClient.Get(Par:Address)
      OF 2
          ThisWebClient.Post(Par:Address,Par:Request)
      END
    END
    RETURN ReturnValue
  END
  ReturnValue = Level:Fatal
  RETURN ReturnValue


ThisWebClient.ErrorTrap PROCEDURE(string errorStr,string functionName)


  CODE
  PARENT.ErrorTrap(errorStr,functionName)
  Message ('No response received. Error ' & ThisWebClient.Error & |
           ' = ' & ThisWebClient.InterpretError())
  SETCURSOR()  ! Return mouse back to normal.
             ! If an error occurs, the NetWebClient will display a message,
             ! unless you suppress error messages in the procedure extension template, 
             ! in which case you would need to handle your own error messages.
  


ThisWebClient.PageReceived PROCEDURE


  CODE
  ! This is the code that is called when the page has been downloaded.
  ! In this case we display it on the screen by putting it in the ChatGPTResponse
  ! variable.
  ThisWebClient.TextOnly()
  IF SELF.ThisPage.Length() <= 0
      Loc:GetString = ''
  ELSIF SELF.ThisPage.Length() < size (Loc:GetString)
      Loc:GetString = SELF.ThisPage.GetValue()
      Loc:Status='Your request has been completed.'
      DO ResponseCompleted
  ELSE
      Loc:Status = '* Incoming response ' & SELF.ThisPage.Length() & |
               ' byte, the part you can see on the screen ' & size (Loc:GetString) & ' byte.'
      Loc:GetString=SELF.ThisPage.GetValue()
      DO ResponseCompleted
  END
  SETCURSOR()
  DISPLAY()
  PARENT.PageReceived


ThisWebClient.Process PROCEDURE


  CODE
  ! Must be above parent call for this to work. As the parent.process calls .PageReceived()
  IF SELF.packet.packetType = NET:SimplePartialDataPacket
      IF SELF.PageContentLen > 0
          Loc:Status = 'Waiting response ' & SELF.ThisPage.Length() & ' / ' & (SELF.PageContentLen + SELF.HeaderLen)
          DISPLAY(?Loc:Status)
      END
  END
  PARENT.Process

