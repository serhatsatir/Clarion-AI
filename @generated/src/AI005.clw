

   MEMBER('AI.clw')                                        ! This is a MEMBER module


   INCLUDE('ABTOOLBA.INC'),ONCE
   INCLUDE('ABWINDOW.INC'),ONCE
   INCLUDE('NetWww.inc'),ONCE

                     MAP
                       INCLUDE('AI005.INC'),ONCE        !Local module procedure declarations
                     END


!!! <summary>
!!! Generated from procedure template - Window
!!! If you have defined a ChatGPT Assistant, you can talk to that assistant.
!!! </summary>
AI_ChatGPT_Assistant PROCEDURE 

API_Key              CSTRING(81)                           ! 
Assistant            CSTRING(51)                           ! 
API_temp             REAL(0.7)                             ! 
JSON                 JSONDataClass                         ! 
MyQuestion           CSTRING(5001)                         ! 
ChatGPTResponse      CSTRING(300001)                       ! 
Loc:CreateRunResponse GROUP,PRE()                          ! 
id                   CSTRING(51),NAME('id')                ! 
thread_id            CSTRING(51),NAME('thread_id')         ! 
                     END                                   ! 
Loc:Status           CSTRING(501)                          ! 
Loc:RunStatus        GROUP,PRE()                           ! 
status               CSTRING(51),NAME('status')            ! 
                     END                                   ! 
Loc:GetString        STRING(500000)                        ! 
Window               WINDOW('Custom Assistant (ChatGPT)'),AT(,,386,224),FONT('Segoe UI',10,,FONT:regular),DOUBLE, |
  CENTER,ICON('chatgpt.ico'),GRAY,IMM,SYSTEM
                       BOX,AT(3,4,380,216),USE(?Box1),COLOR(COLOR:Gray),LINEWIDTH(1),ROUND
                       STRING(@s255),AT(8,205,345),USE(Loc:Status),CENTER,TRN
                       TEXT,AT(9,9,369,37),USE(MyQuestion),VSCROLL
                       TEXT,AT(9,91,369,112),USE(ChatGPTResponse),VSCROLL,COLOR(00DCDCDCh),READONLY
                       BUTTON('Post'),AT(328,49,50,12),USE(?GetPage),LEFT,ICON('chatgpt.ico'),TIP('Send your r' & |
  'equest to ChatGPT')
                       PROMPT('Key:'),AT(24,50),USE(?API_Key:Prompt),TRN
                       ENTRY(@s80),AT(73,50,201,10),USE(API_Key),TIP('Create your own API key using following ' & |
  'web page: https://platform.openai.com/account/api-keys<0DH,0AH,0DH,0AH>like; sk-VyUX' & |
  '.{18}5Y3aw')
                       BUTTON,AT(363,205,15,10),USE(?BUTTON:Copy),ICON(ICON:Copy),FLAT,TIP('Copy response to clipboard'), |
  TRN
                       PROMPT('Temperature:'),AT(24,77),USE(?API_temp:Prompt),TRN
                       SPIN(@n3.1),AT(73,77,,10),USE(API_temp),RIGHT(1),RANGE(0,1),STEP(0.1),TIP('* Low temper' & |
  'ature (0 to 0.3): More focused, coherent, and conservative outputs.<0DH,0AH>* Medium' & |
  ' temperature (0.3 to 0.7): Balanced creativity and coherence.<0DH,0AH>* High tempera' & |
  'ture (0.7 to 1): Highly creative and diverse, but potentially less coherent.')
                       STRING('API'),AT(7,49,,24),USE(?STRING1),FONT(,,,FONT:bold,CHARSET:DEFAULT),CENTER,ANGLE(900), |
  COLOR(00D3D3D3h)
                       PROMPT('Assistant ID:'),AT(24,64),USE(?Assistant:Prompt)
                       ENTRY(@s50),AT(73,64,146,10),USE(Assistant),TIP('Created ChatGPT assistant code like; a' & |
  'sst_08.{16}5RZ')
                     END

ThisWindow           CLASS(WindowManager)
Init                   PROCEDURE(),BYTE,PROC,DERIVED
Kill                   PROCEDURE(),BYTE,PROC,DERIVED
TakeAccepted           PROCEDURE(),BYTE,PROC,DERIVED
TakeEvent              PROCEDURE(),BYTE,PROC,DERIVED
                     END

Toolbar              ToolbarClass
! ----- st --------------------------------------------------------------------------
st                   Class(StringTheory)
                     End  ! st
! ----- end st -----------------------------------------------------------------------
!Local Data Classes
ThisWebClient        CLASS(NetWebClient)                   ! Generated by NetTalk Extension (Class Definition)
ErrorTrap              PROCEDURE(string errorStr,string functionName),DERIVED
PageReceived           PROCEDURE(),DERIVED
Process                PROCEDURE(),DERIVED

                     END


  CODE
  GlobalResponse = ThisWindow.Run()                        ! Opens the window and starts an Accept Loop

!---------------------------------------------------------------------------
DefineListboxStyle ROUTINE
!|
!| This routine create all the styles to be shared in this window
!| It`s called after the window open
!|
!---------------------------------------------------------------------------
CreateAndRun        ROUTINE
    SETCURSOR(CURSOR:Wait); DISPLAY()
    st.SetValue(MyQuestion,st:Clip); st.JsonEncode()

    st.Prepend('{{"assistant_id": "'&Assistant&'","thread":{{"messages": [{{"role": "user", "content": "')
    st.Append('"}]}}')
    st.Trace('CreateAndRun: '&st.GetValue())

    ! Generate UTF8 from Turkish characters
    st._StealValue(st.AnsiToUtf8(st.getValuePtr(),uz#,st:CP_ISO_8859_9))
    
    Loc:GetString=GetResponse(2,API_Key,'https://api.openai.com/v1/threads/runs',st.GetValue())
    JSON.FromJSON(Loc:GetString,Loc:CreateRunResponse)
CheckRunCompleted         ROUTINE
    Loc:GetString=GetResponse(1,API_Key,'https://api.openai.com/v1/threads/'&thread_id&'/runs/'&id)
    st.Trace('CheckRunCompleted: https://api.openai.com/v1/threads/'&thread_id&'/runs/'&id&' - '&CLIP(Loc:GetString))
    JSON.FromJSON(Loc:GetString,Loc:RunStatus)
GetResponse     ROUTINE
    Loc:GetString=GetResponse(1,API_Key,'https://api.openai.com/v1/threads/'&thread_id&'/messages')

    ! Generate Turkish ANSI characters from UTF8
    Loc:GetString=st.Utf8ToAnsi(Loc:GetString,uz#,st:CP_ISO_8859_9)
    
    st.Trace('GetResponse: https://api.openai.com/v1/threads/'&thread_id&'/messages - '&CLIP(Loc:GetString))
    st.SetValue(CLIP(Loc:GetString)); st.Replace('\n','<13,10>'); st.Replace('<13>','<13,10>'); st.JsonDecode()
    ChatGPTResponse=st.Between('"value": "','",')
    DISPLAY(?ChatGPTResponse)
    SETCURSOR(); DISPLAY()
    

ThisWindow.Init PROCEDURE

ReturnValue          BYTE,AUTO

  CODE
  GlobalErrors.SetProcedureName('AI_ChatGPT_Assistant')
  SELF.Request = GlobalRequest                             ! Store the incoming request
  ReturnValue = PARENT.Init()
  IF ReturnValue THEN RETURN ReturnValue.
  SELF.FirstField = ?Box1
  SELF.VCRRequest &= VCRRequest
  SELF.Errors &= GlobalErrors                              ! Set this windows ErrorManager to the global ErrorManager
  ! Restore preserved local variables from non-volatile store
  MyQuestion = INIMgr.TryFetch('AI_ChatGPT_Assistant_PreservedVars','MyQuestion')
  API_Key = INIMgr.TryFetch('AI_ChatGPT_Assistant_PreservedVars','API_Key')
  API_temp = INIMgr.TryFetch('AI_ChatGPT_Assistant_PreservedVars','API_temp')
  Assistant = INIMgr.TryFetch('AI_ChatGPT_Assistant_PreservedVars','Assistant')
  IF MyQuestion='' THEN MyQuestion='Could you write a lyrical poem about Clarion programming language?'.
  CLEAR(GlobalRequest)                                     ! Clear GlobalRequest after storing locally
  CLEAR(GlobalResponse)
  SELF.AddItem(Toolbar)
  SELF.Open(Window)                                        ! Open window
  !Setting the LineHeight for every control of type LIST/DROP or COMBO in the window using the global setting.
                                               ! Generated by NetTalk Extension (Start)
  ThisWebClient.init()
  if ThisWebClient.error <> 0
    ! Put code in here to handle if the object does not initialise properly
  end
  Do DefineListboxStyle
  !ProcedureTemplate = Window
  INIMgr.Fetch('AI_ChatGPT_Assistant',Window)              ! Restore window settings from non-volatile store
  SELF.SetAlerts()
  RETURN ReturnValue


ThisWindow.Kill PROCEDURE

ReturnValue          BYTE,AUTO

  CODE
  ThisWebClient.Kill()                              ! Generated by NetTalk Extension
  ReturnValue = PARENT.Kill()
  IF ReturnValue THEN RETURN ReturnValue.
  IF SELF.Opened
    INIMgr.Update('AI_ChatGPT_Assistant',Window)           ! Save window data to non-volatile store
  END
  ! Save preserved local variables in non-volatile store
  INIMgr.Update('AI_ChatGPT_Assistant_PreservedVars','MyQuestion',MyQuestion)
  INIMgr.Update('AI_ChatGPT_Assistant_PreservedVars','API_Key',API_Key)
  INIMgr.Update('AI_ChatGPT_Assistant_PreservedVars','API_temp',API_temp)
  INIMgr.Update('AI_ChatGPT_Assistant_PreservedVars','Assistant',Assistant)
  GlobalErrors.SetProcedureName
  RETURN ReturnValue


ThisWindow.TakeAccepted PROCEDURE

ReturnValue          BYTE,AUTO

Looped BYTE
  CODE
  LOOP                                                     ! This method receive all EVENT:Accepted's
    IF Looped
      RETURN Level:Notify
    ELSE
      Looped = 1
    END
  ReturnValue = PARENT.TakeAccepted()
    CASE ACCEPTED()
    OF ?GetPage
      ThisWindow.Update()
      IF API_Key='' THEN
          MESSAGE('Create your own API key using following web page: https://platform.openai.com/account/api-keys','ChatGPT API Key',ICON:Exclamation,,,MSGMODE:CANCOPY)
          CYCLE
      END
      
      SETCURSOR(CURSOR:Wait)
      Loc:GetString=''
      ChatGPTResponse=''
      Loc:Status = 'Waiting response'
      DISPLAY()
      
      DO CreateAndRun
      LOOP 50 TIMES
          SLEEP(1000)
          DO CheckRunCompleted
          IF status='completed' THEN BREAK.
      END
      
      DO GetResponse
    END
    RETURN ReturnValue
  END
  ReturnValue = Level:Fatal
  RETURN ReturnValue


ThisWindow.TakeEvent PROCEDURE

ReturnValue          BYTE,AUTO

Looped BYTE
  CODE
  LOOP                                                     ! This method receives all events
    IF Looped
      RETURN Level:Notify
    ELSE
      Looped = 1
    END
    ThisWebClient.TakeEvent()                 ! Generated by NetTalk Extension
  ReturnValue = PARENT.TakeEvent()
    RETURN ReturnValue
  END
  ReturnValue = Level:Fatal
  RETURN ReturnValue


ThisWebClient.ErrorTrap PROCEDURE(string errorStr,string functionName)


  CODE
  PARENT.ErrorTrap(errorStr,functionName)
  Message ('No response received. Error ' & ThisWebClient.Error & |
           ' = ' & ThisWebClient.InterpretError())
  SETCURSOR  ! Return mouse back to normal.
             ! If an error occurs, the NetWebClient will display a message,
             ! unless you suppress error messages in the procedure extension template, 
             ! in which case you would need to handle your own error messages.
  


ThisWebClient.PageReceived PROCEDURE


  CODE
  ! This is the code that is called when the page has been downloaded.
  ! In this case we display it on the screen by putting it in the ChatGPTResponse
  ! variable.
  ThisWebClient.TextOnly()
  IF SELF.ThisPage.Length() <= 0
      Loc:GetString = ''
  ELSIF SELF.ThisPage.Length() < size (Loc:GetString)
      Loc:GetString = SELF.ThisPage.GetValue()
      Loc:Status='Your request has been completed.'
  ELSE
      Loc:Status = '* Incoming response ' & SELF.ThisPage.Length() & |
               ' byte, the part you can see on the screen ' & size (Loc:GetString) & ' byte.'
      Loc:GetString=SELF.ThisPage.GetValue()
  END
  ThisWebClient.Close()
  SETCURSOR()
  DISPLAY()
  PARENT.PageReceived


ThisWebClient.Process PROCEDURE


  CODE
  ! Must be above parent call for this to work. As the parent.process calls .PageReceived()
  IF SELF.packet.packetType = NET:SimplePartialDataPacket
      IF SELF.PageContentLen > 0
          Loc:Status = 'Waiting response ' & SELF.ThisPage.Length() & ' / ' & (SELF.PageContentLen + SELF.HeaderLen)
          DISPLAY(?Loc:Status)
      END
  END
  PARENT.Process

